@page "/"
@using AplikacjaLogujacaSignalR.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>


<div hidden=@(showBledzik)>
    <label>Niepoprawne dane</label>
</div>
<div class="form-group" hidden="@IsShow">
    <label>
        User:
        <input @bind="userLogin" />
    </label>
</div>
<div class="form-group" hidden="@IsShow">
    <label>
        Password:
        <input @bind="userPassword" type="password" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)" hidden="@IsShow">Send</button>

<hr>

<ul id="messagesList" hidden="@(!IsShow)">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>
<button hidden="@(!IsShow)" @onclick="Logout">Logout</button>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userLogin;
    private string? userPassword;
    private bool IsShow {get;set;} = false;
    private bool showBledzik { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/loginhub"))
            .Build();

        //hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        //{
        //    var encodedMsg = $"{user}: {message}";
        //    messages.Add(encodedMsg);
        //    StateHasChanged();
        //});

        hubConnection.On<List<User>>("SendUsers", (usersList) =>
        {
            foreach(User user in usersList)
            {
                var encodedMsg = $"{user.Login}: {user.Password}";
                messages.Add(encodedMsg);
            }
            IsShow = true;
            showBledzik = true;
            StateHasChanged();
        });

        hubConnection.On<List<Tuple<string, string>>>("ReceiveMessage", (usersList) =>
        {
            foreach(Tuple<string,string> user in usersList)
            {
                var encodedMsg = $"{user.Item1}: {user.Item2}";
                messages.Add(encodedMsg);
            }
            IsShow = true;
            showBledzik = true;
            StateHasChanged();
        });

        hubConnection.On<bool>("WrongCredentials", (bledzik) =>
        {
            showBledzik = false;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userLogin, userPassword);
        }
    }

    private void Logout()
    {
        IsShow = !IsShow;
        messages.Clear();
        userLogin = "";
        userPassword = "";
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}